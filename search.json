[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatistik und Studiendesign",
    "section": "",
    "text": "Code\nimport math\nfrom typing import Tuple\nfrom collections import namedtuple\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\n\nBENE_COLORS_DARK: Tuple[str, ...] = (\n    \"#47476b\",\n    \"#6B5706\",\n    \"#206260\",\n    \"#93003a\",\n    \"#215F80\",\n    \"#973C2B\",\n    \"#008381\",\n    \"#6d3d3d\",\n    \"#595865\",\n)\npio.templates[\"bene\"] = go.layout.Template(layout=go.Layout(colorway=BENE_COLORS_DARK))\npio.templates.default = \"plotly_white+bene\"\n\nFourByFourTable = namedtuple(\"FourByFourTable\", [\"a\", \"b\", \"c\", \"d\"])\n\n\ndef berechne_ppv(sens: float, spez: float, praev: float) -&gt; float:\n    return (sens * praev) / (sens * praev + (1 - spez) * (1 - praev))\n\n\ndef berechne_npv(sens: float, spez: float, praev: float) -&gt; float:\n    return (spez * (1 - praev)) / (spez * (1 - praev) + (1 - sens) * praev)\n\n\ndef berechne_95_ci(s: float, n: int) -&gt; tuple:\n    lower = s - 1.96 * math.sqrt(s * (1 - s) / n)\n    upper = s + 1.96 * math.sqrt(s * (1 - s) / n)\n    return lower, upper\n\n\ndef berechne_se_4x4(four_by_four_table: FourByFourTable) -&gt; float:\n    return four_by_four_table.a / (four_by_four_table.a + four_by_four_table.c)\n\n\ndef berechne_sp_4x4(four_by_four_table: FourByFourTable) -&gt; float:\n    return four_by_four_table.d / (four_by_four_table.b + four_by_four_table.d)"
  },
  {
    "objectID": "index.html#aufgabe-2-glaukom",
    "href": "index.html#aufgabe-2-glaukom",
    "title": "Biostatistik und Studiendesign",
    "section": "Aufgabe 2: Glaukom",
    "text": "Aufgabe 2: Glaukom\n\nPrävalenz: 0.9 % = 0.009\nSensitivität: 85 % = 0.85\nSpezifität: 90 % = 0.90\n\n\n\nCode\nprevalence = 0.009\nsensitivity = 0.85\nspecificity = 0.90\n\n\n\n2\n\n\nCode\nppv_screening = berechne_ppv(sensitivity, specificity, prevalence)\nppv_screening\n\n\n0.07166276346604215\n\n\n\n\nCode\nnpv_screening = berechne_npv(sensitivity, specificity, prevalence)\nnpv_screening\n\n\n0.9984886649874056\n\n\n\n\n3\n\n\nCode\npopulation = 100000\ntrue_positives = sensitivity * prevalence * population\nfalse_negatives = (1 - sensitivity) * prevalence * population\nfalse_positives = (1 - specificity) * (1 - prevalence) * population\ntrue_negatives = specificity * (1 - prevalence) * population\ntrue_positives, false_negatives, false_positives, true_negatives\n\n\n(764.9999999999999, 135.0, 9909.999999999998, 89190.0)"
  },
  {
    "objectID": "index.html#aufgabe-3",
    "href": "index.html#aufgabe-3",
    "title": "Biostatistik und Studiendesign",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\n\n1\n\n\nCode\n# Gegebene Werte aus der Studie (Katz et al., 1993)\nsensitivity_study = 0.836  # Sensitivität des Suprathreshold Visual Field Test\nspecificity_study = 0.749  # Spezifität des Suprathreshold Visual Field Test\n\n# Populationsgröße in der Studie\ntotal_population_study = 5341  \n\n# Anzahl tatsächlich kranker (Glaukomfälle)\ntrue_cases_study = 146  \n\n# Anzahl gesunder Personen\nhealthy_cases_study = total_population_study - true_cases_study  \n\n# Berechnung der Prävalenz in der Studienpopulation\nprevalence_study = true_cases_study / total_population_study  \n\n# Berechnung des positiven prädiktiven Werts (PPV)\nppv_study = berechne_ppv(sensitivity_study, specificity_study, prevalence_study)\n\n# Berechnung des negativen prädiktiven Werts (NPV)\nnpv_study = berechne_npv(sensitivity_study, specificity_study, prevalence_study)\n\nppv_study, npv_study\n\n\n(0.08559320785890051, 0.9938840341977099)\n\n\nPrävalenz bei beiden Test nacheinander. Prävalenz des zweiten Tests ist PPV des ersten Tests.\n\n\nCode\nppv_study_after_positive_screening = berechne_ppv(sensitivity_study, specificity_study, ppv_screening)\nnpv_study_after_positive_screening = berechne_npv(sensitivity_study, specificity_study, ppv_screening)\nppv_study_after_positive_screening, npv_study_after_positive_screening\n\n\n(0.20452517628999506, 0.9833784884837806)\n\n\n\n\n2\n\na\n\n\nCode\n1-npv_study\n\n\n0.006115965802290124\n\n\n\n\nc\n\n\nCode\n1-ppv_study\n\n\n0.9144067921410994\n\n\n\n\n\n3\n\n\nCode\nberechne_95_ci(sensitivity_study, total_population_study), berechne_95_ci(specificity_study, total_population_study)\n\n\n((0.8260695290539164, 0.8459304709460835),\n (0.7373715306646761, 0.7606284693353239))"
  },
  {
    "objectID": "index.html#aufgabe-4",
    "href": "index.html#aufgabe-4",
    "title": "Biostatistik und Studiendesign",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\n\n2\n\n\nCode\ncutoff_1_44 = FourByFourTable(53, 285, 0, 182)\ncutoff_1_44_se = berechne_se_4x4(cutoff_1_44)\ncutoff_1_44_sp = berechne_sp_4x4(cutoff_1_44)\ncutoff_1_44_se, cutoff_1_44_sp, 1-cutoff_1_44_sp\n\n\n(1.0, 0.3897216274089936, 0.6102783725910064)\n\n\n\n\nCode\ncutoff_1_14 = FourByFourTable(50, 187, 3, 280)\ncutoff_1_14_se = berechne_se_4x4(cutoff_1_14)\ncutoff_1_14_sp = berechne_sp_4x4(cutoff_1_14)\ncutoff_1_14_se, cutoff_1_14_sp, 1-cutoff_1_14_sp\n\n\n(0.9433962264150944, 0.5995717344753747, 0.4004282655246253)\n\n\n\n\nCode\ncutoff_1_02 = FourByFourTable(43, 112, 10, 355)\ncutoff_1_02_se = berechne_se_4x4(cutoff_1_02)\ncutoff_1_02_sp = berechne_sp_4x4(cutoff_1_02)\ncutoff_1_02_se, cutoff_1_02_sp, 1-cutoff_1_02_sp\n\n\n(0.8113207547169812, 0.7601713062098501, 0.23982869379014993)\n\n\n\n\nCode\ncutoff_0_8 = FourByFourTable(34, 47, 19, 420)\ncutoff_0_8_se = berechne_se_4x4(cutoff_0_8)\ncutoff_0_8_sp = berechne_sp_4x4(cutoff_0_8)\ncutoff_0_8_se, cutoff_0_8_sp, 1-cutoff_0_8_sp\n\n\n(0.6415094339622641, 0.8993576017130621, 0.10064239828693788)\n\n\n\n\nCode\ncutoff_0_6 = FourByFourTable(23, 5, 30, 462)\ncutoff_0_6_se = berechne_se_4x4(cutoff_0_6)\ncutoff_0_6_sp = berechne_sp_4x4(cutoff_0_6)\ncutoff_0_6_se, cutoff_0_6_sp, 1-cutoff_0_6_sp\n\n\n(0.4339622641509434, 0.9892933618843683, 0.010706638115631661)\n\n\n\n\nCode\nroc_x = [\n    0,\n    1 - cutoff_0_6_sp,\n    1 - cutoff_0_8_sp,\n    1 - cutoff_1_02_sp,\n    1 - cutoff_1_14_sp,\n    1 - cutoff_1_44_sp,\n    1,\n]\nroc_y = [\n    0,\n    cutoff_0_6_se,\n    cutoff_0_8_se,\n    cutoff_1_02_se,\n    cutoff_1_14_se,\n    cutoff_1_44_se,\n    1,\n]\nroc_labels = [\"\", \"0.6 mm²\", \"0.8 mm²\", \"1.02 mm²\", \"1.14 mm²\", \"1.44 mm²\", \"\"]\n\nfig = go.Figure()\nfig.add_shape(\n    type=\"line\", line=dict(dash=\"dash\"), fillcolor=\"black\", x0=0, x1=1, y0=0, y1=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=roc_x,\n        y=roc_y,\n        text=roc_labels,\n        textposition=\"bottom right\",\n        mode=\"lines+markers+text\",\n        fill=\"tozeroy\",\n        fillcolor=\"rgba(71, 71, 107, 0.2)\",\n    )\n)\nfig.update_layout(\n    title=\"ROC Curve RNFL Area\",\n    xaxis_title=\"1 - Spezifität\",\n    yaxis_title=\"Sensitivität\",\n    xaxis=dict(range=[0, 1]),\n    yaxis=dict(range=[0, 1], scaleanchor=\"x\", scaleratio=1),\n)\nfig.show()\nfig.write_image(\"roc_curve.png\")"
  }
]